@namespace RunOptions
@using System.IO
@using System.Text.Json
@inject OptionProfile Profile

<div class="page">

    <!-- tabs -->
    <div class="pcss3t pcss3t-effect-scale pcss3t-theme-1">
        <input type="radio" name="pcss3t" checked id="tab1" class="tab-content-first">
        <label for="tab1" style="font-weight: bold;">PCA</label>

        <input type="radio" name="pcss3t" id="tab2" class="tab-content-2">
        <label for="tab2" style="font-weight: bold;">ANN</label>

        <ul>

            <li class="tab-content tab-content-first typography">
                <OptionItem @ref="ChildComponents[0]" @bind-ProfileItem="Profile.NumComponents" />
                <OptionItem @ref="ChildComponents[1]" @bind-ProfileItem="Profile.FullSpectrum" />
            </li>

            <li class="tab-content tab-content-2 typography">
                <OptionItem @ref="ChildComponents[2]" @bind-ProfileItem="Profile.Framework" />
                <OptionItem @ref="ChildComponents[3]" @bind-ProfileItem="Profile.Optimizer" />
                <OptionItem @ref="ChildComponents[4]" @bind-ProfileItem="Profile.Activation" />
                <OptionItem @ref="ChildComponents[5]" @bind-ProfileItem="Profile.Loss" />
                <OptionItem @ref="ChildComponents[6]" @bind-ProfileItem="Profile.Epochs" />
                <OptionItem @ref="ChildComponents[7]" @bind-ProfileItem="Profile.BatchSize" />
                <OptionItem @ref="ChildComponents[8]" @bind-ProfileItem="Profile.Patience" />
                <OptionItem @ref="ChildComponents[9]" @bind-ProfileItem="Profile.HiddenNodes" />
                <OptionItem @ref="ChildComponents[10]" @bind-ProfileItem="Profile.Runs" />
                <OptionItem @ref="ChildComponents[11]" @bind-ProfileItem="Profile.ClassNumber" />
            </li>

        </ul>

    </div>
    <div id="maincontainer">
        <div id="inner">
            @{
                string fontcolor = ThemeService.Instance().Secondary;
                string bkg = ThemeService.Instance().Dark;
            }
            <button class="Button" @onclick="ShowSaveModal" style="
            margin: 0 10px 0 0; 
            color: @fontcolor; 
            background-color: @bkg;">
                Save Profile
            </button>
            <button class="Button" @onclick="ShowLoadModal" style="
            margin: 0 10px 0 0; 
            color: @fontcolor; 
            background-color: @bkg;">
                Load Profile
            </button>
        </div>
    </div>
</div>

<Modal @ref="LoadProfileModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Select File</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Select TValue="string" SelectedValue="@SelectedProfileFile" SelectedValueChanged="@LoadProfileOnChanged">
                <SelectItem Hidden>Select</SelectItem>
                @foreach (string file in ProfileFiles)
                {
                    var myFilePath = file;
                    var myFile = System.IO.Path.GetFileName(myFilePath);
                    <SelectItem Value="@myFile">@myFile</SelectItem>
                }
            </Select>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@LoadProfile">Load</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="SaveProfileModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Enter Profile Name</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <TextEdit Placeholder="Profile name..." @bind-Text="@SaveProfileName" />
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@SaveProfile">Save</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {

    private Modal LoadProfileModal;
    private Task ShowLoadModal() { return LoadProfileModal.Show(); }
    private Task HideLoadModal() { return LoadProfileModal.Hide(); }
    private string SelectedProfileFile { get; set; }
    string[] ProfileFiles;
    async Task LoadProfileOnChanged(String e)
    {
        try
        {
            if (e == null) return;
            SelectedProfileFile = e;
        }
        catch (Exception exc)
        {
            Console.WriteLine(exc);
        }
        finally
        {
            StateHasChanged();
        }
    }

    private Modal SaveProfileModal;
    private Task ShowSaveModal() { return SaveProfileModal.Show(); }
    private Task HideSaveModal() { return SaveProfileModal.Hide(); }
    private string SaveProfileName { get; set; }

    protected OptionItem[] ChildComponents = new OptionItem[12];
    private void RefreshChildren()
    {
        for (int i = 0; i < ChildComponents.Length; i++)
            ChildComponents[i].Refresh();
    }

    public void LoadProfile()
    {
        ProfileFiles = Directory.GetFiles("Profiles");
        Profile.Update($"Profiles/{SelectedProfileFile}");
        RefreshChildren();
        HideLoadModal();
    }

    public void SaveProfile()
    {
        ProfileFiles = Directory.GetFiles("Profiles");
        SaveProfileName = SaveProfileName.Replace(".json", "");
        if (File.Exists($"Profiles/{SaveProfileName}.json"))
        {
            SaveProfileName = "Name is already taken!";
        }
        else
        {
            File.WriteAllText($"Profiles/{SaveProfileName}.json", Profile.ToJson());
            HideSaveModal();
        }
        Console.WriteLine(Profile.ToJson());
    }

    protected override void OnInitialized()
    {
        Console.WriteLine(Directory.GetCurrentDirectory());
        ProfileFiles = Directory.GetFiles("Profiles");
        base.OnInitialized();
    }

}